diff --git a/node_modules/ts-to-zod/lib/core/generate.js b/node_modules/ts-to-zod/lib/core/generate.js
index 9b11d67..a9b5d6c 100644
--- a/node_modules/ts-to-zod/lib/core/generate.js
+++ b/node_modules/ts-to-zod/lib/core/generate.js
@@ -25,6 +25,8 @@ function generate({ sourceText, nameFilter = () => true, jsDocTagFilter = () =>
     // declare a map to store the interface name and its corresponding zod schema
     const typeNameMapping = new Map();
     const typesNeedToBeExtracted = new Set();
+    const typesWithGenerics = new Set();
+
     const typeNameMapBuilder = (node) => {
         if ((0, traverseTypes_1.isTypeNode)(node)) {
             typeNameMapping.set(node.name.text, node);
@@ -35,6 +37,14 @@ function generate({ sourceText, nameFilter = () => true, jsDocTagFilter = () =>
         if (typescript_1.default.isInterfaceDeclaration(node) ||
             typescript_1.default.isTypeAliasDeclaration(node) ||
             typescript_1.default.isEnumDeclaration(node)) {
+
+            if ((typescript_1.default.isInterfaceDeclaration(node) ||
+                typescript_1.default.isTypeAliasDeclaration(node))
+                && node.typeParameters) {
+                typesWithGenerics.add(node);
+                return
+            }
+
             const jsDoc = (0, tsutils_1.getJsDoc)(node, sourceFile);
             const tags = (0, getSimplifiedJsDocTags_1.getSimplifiedJsDocTags)(jsDoc);
             if (!jsDocTagFilter(tags))
@@ -79,52 +89,52 @@ function generate({ sourceText, nameFilter = () => true, jsDocTagFilter = () =>
     // Loop until no more schemas can be generated and no more schemas with direct or indirect missing dependencies are found
     while (!done &&
         statements.size + zodSchemasWithMissingDependencies.size !==
-            zodSchemas.length) {
+        zodSchemas.length) {
         done = true;
         zodSchemas
             .filter(({ varName }) => !statements.has(varName) &&
-            !zodSchemasWithMissingDependencies.has(varName))
+                !zodSchemasWithMissingDependencies.has(varName))
             .forEach(({ varName, dependencies, statement, typeName, requiresImport }) => {
-            const isCircular = dependencies.includes(varName);
-            const notGeneratedDependencies = dependencies
-                .filter((dep) => dep !== varName)
-                .filter((dep) => !statements.has(dep));
-            if (notGeneratedDependencies.length === 0) {
-                done = false;
-                if (isCircular) {
-                    typeImports.add(typeName);
-                    statements.set(varName, {
-                        value: (0, transformRecursiveSchema_1.transformRecursiveSchema)("z", statement, typeName),
-                        typeName,
-                    });
-                }
-                else {
-                    if (requiresImport) {
+                const isCircular = dependencies.includes(varName);
+                const notGeneratedDependencies = dependencies
+                    .filter((dep) => dep !== varName)
+                    .filter((dep) => !statements.has(dep));
+                if (notGeneratedDependencies.length === 0) {
+                    done = false;
+                    if (isCircular) {
                         typeImports.add(typeName);
+                        statements.set(varName, {
+                            value: (0, transformRecursiveSchema_1.transformRecursiveSchema)("z", statement, typeName),
+                            typeName,
+                        });
+                    }
+                    else {
+                        if (requiresImport) {
+                            typeImports.add(typeName);
+                        }
+                        statements.set(varName, { value: statement, typeName });
                     }
-                    statements.set(varName, { value: statement, typeName });
                 }
-            }
-            else if (
-            // Check if every dependency is (in `zodSchemas` and not in `zodSchemasWithMissingDependencies`)
-            !notGeneratedDependencies.every((dep) => zodSchemaNames.includes(dep) &&
-                !zodSchemasWithMissingDependencies.has(dep))) {
-                done = false;
-                zodSchemasWithMissingDependencies.add(varName);
-            }
-        });
+                else if (
+                    // Check if every dependency is (in `zodSchemas` and not in `zodSchemasWithMissingDependencies`)
+                    !notGeneratedDependencies.every((dep) => zodSchemaNames.includes(dep) &&
+                        !zodSchemasWithMissingDependencies.has(dep))) {
+                    done = false;
+                    zodSchemasWithMissingDependencies.add(varName);
+                }
+            });
     }
     // Generate remaining schemas, which have circular dependencies with loop of length > 1 like: A->Bâ€”>C->A
     zodSchemas
         .filter(({ varName }) => !statements.has(varName) &&
-        !zodSchemasWithMissingDependencies.has(varName))
+            !zodSchemasWithMissingDependencies.has(varName))
         .forEach(({ varName, statement, typeName }) => {
-        typeImports.add(typeName);
-        statements.set(varName, {
-            value: (0, transformRecursiveSchema_1.transformRecursiveSchema)("z", statement, typeName),
-            typeName,
+            typeImports.add(typeName);
+            statements.set(varName, {
+                value: (0, transformRecursiveSchema_1.transformRecursiveSchema)("z", statement, typeName),
+                typeName,
+            });
         });
-    });
     // Warn the user of possible not resolvable loops
     const errors = [];
     if (zodSchemasWithMissingDependencies.size > 0) {
@@ -140,23 +150,35 @@ ${Array.from(zodSchemasWithMissingDependencies).join("\n")}`);
         newLine: typescript_1.default.NewLineKind.LineFeed,
     });
     const print = (node) => printer.printNode(typescript_1.default.EmitHint.Unspecified, node, sourceFile);
+
+    if (typesWithGenerics.size > 0) {
+        function getTypeParams(node) {
+            return node.typeParameters ? `<` + node.typeParameters.map(tp => tp.name.text).join(',') + `>` : '';
+        }
+
+        errors.push(`Some schemas can't be generated due to interface/types with generics are not supported:`);
+        errors.push(...Array.from(typesWithGenerics).map(t => {
+            return `${t.name.text}${getTypeParams(t)}`;
+        }));
+    }
+
     const transformedSourceText = printerWithComments.printFile(sourceFile);
     const imports = Array.from(typeImports.values());
     const getZodSchemasFile = (typesImportPath) => `// Generated by ts-to-zod
 import { z } from "zod";
 ${imports.length
-        ? `import { ${imports.join(", ")} } from "${typesImportPath}";\n`
-        : ""}
+            ? `import { ${imports.join(", ")} } from "${typesImportPath}";\n`
+            : ""}
 ${Array.from(statements.values())
-        .map((statement) => print(statement.value))
-        .join("\n\n")}
+            .map((statement) => print(statement.value))
+            .join("\n\n")}
 `;
     const testCases = (0, generateIntegrationTests_1.generateIntegrationTests)(Array.from(statements.values())
         .filter(isExported)
         .map((i) => ({
-        zodType: `${getSchemaName(i.typeName)}InferredType`,
-        tsType: `spec.${i.typeName}`,
-    })));
+            zodType: `${getSchemaName(i.typeName)}InferredType`,
+            tsType: `spec.${i.typeName}`,
+        })));
     const getIntegrationTestFile = (typesImportPath, zodSchemasImportPath) => `// Generated by ts-to-zod
 import { z } from "zod";
 
@@ -169,17 +191,17 @@ function expectType<T>(_: T) {
 }
 
 ${Array.from(statements.values())
-        .filter(isExported)
-        .map((statement) => {
-        // Generate z.infer<>
-        const zodInferredSchema = (0, generateZodInferredType_1.generateZodInferredType)({
-            aliasName: `${getSchemaName(statement.typeName)}InferredType`,
-            zodConstName: `generated.${getSchemaName(statement.typeName)}`,
-            zodImportValue: "z",
-        });
-        return print(zodInferredSchema);
-    })
-        .join("\n\n")}
+            .filter(isExported)
+            .map((statement) => {
+                // Generate z.infer<>
+                const zodInferredSchema = (0, generateZodInferredType_1.generateZodInferredType)({
+                    aliasName: `${getSchemaName(statement.typeName)}InferredType`,
+                    zodConstName: `generated.${getSchemaName(statement.typeName)}`,
+                    zodImportValue: "z",
+                });
+                return print(zodInferredSchema);
+            })
+            .join("\n\n")}
 
 ${testCases.map(print).join("\n")}
 `;
@@ -189,16 +211,16 @@ import { z } from "zod";
 import * as generated from "${zodSchemasImportPath}";
 
 ${Array.from(statements.values())
-        .filter(isExported)
-        .map((statement) => {
-        const zodInferredSchema = (0, generateZodInferredType_1.generateZodInferredType)({
-            aliasName: statement.typeName,
-            zodConstName: `generated.${getSchemaName(statement.typeName)}`,
-            zodImportValue: "z",
-        });
-        return print(zodInferredSchema);
-    })
-        .join("\n\n")}
+            .filter(isExported)
+            .map((statement) => {
+                const zodInferredSchema = (0, generateZodInferredType_1.generateZodInferredType)({
+                    aliasName: statement.typeName,
+                    zodConstName: `generated.${getSchemaName(statement.typeName)}`,
+                    zodImportValue: "z",
+                });
+                return print(zodInferredSchema);
+            })
+            .join("\n\n")}
 `;
     return {
         /**
diff --git a/node_modules/ts-to-zod/lib/core/generateZodInferredType.js b/node_modules/ts-to-zod/lib/core/generateZodInferredType.js
index 7fb267d..3be5fa8 100644
--- a/node_modules/ts-to-zod/lib/core/generateZodInferredType.js
+++ b/node_modules/ts-to-zod/lib/core/generateZodInferredType.js
@@ -12,7 +12,7 @@ const { factory: f } = ts;
  * ```
  */
 function generateZodInferredType({ aliasName, zodImportValue, zodConstName, }) {
-    return f.createTypeAliasDeclaration(undefined, [f.createModifier(ts.SyntaxKind.ExportKeyword)], f.createIdentifier(aliasName), undefined, f.createTypeReferenceNode(f.createQualifiedName(f.createIdentifier(zodImportValue), f.createIdentifier("infer")), [f.createTypeQueryNode(f.createIdentifier(zodConstName))]));
+    return f.createTypeAliasDeclaration([f.createModifier(ts.SyntaxKind.ExportKeyword)], f.createIdentifier(aliasName), undefined, f.createTypeReferenceNode(f.createQualifiedName(f.createIdentifier(zodImportValue), f.createIdentifier("infer")), [f.createTypeQueryNode(f.createIdentifier(zodConstName))]));
 }
 exports.generateZodInferredType = generateZodInferredType;
 //# sourceMappingURL=generateZodInferredType.js.map
\ No newline at end of file
diff --git a/node_modules/ts-to-zod/lib/core/generateZodSchema.js b/node_modules/ts-to-zod/lib/core/generateZodSchema.js
index eae6d63..1767ca3 100644
--- a/node_modules/ts-to-zod/lib/core/generateZodSchema.js
+++ b/node_modules/ts-to-zod/lib/core/generateZodSchema.js
@@ -23,7 +23,7 @@ function generateZodSchemaVariableStatement({ node, sourceFile, varName, zodImpo
     if (ts.isInterfaceDeclaration(node)) {
         let schemaExtensionClauses;
         if (node.typeParameters) {
-            throw new Error("Interface with generics are not supported!");
+            return {node, sourceFile, varName, zodImportValue, getDependencyName, skipParseJSDoc};
         }
         if (node.heritageClauses) {
             // Looping on heritageClauses browses the "extends" keywords
@@ -57,7 +57,7 @@ function generateZodSchemaVariableStatement({ node, sourceFile, varName, zodImpo
     }
     if (ts.isTypeAliasDeclaration(node)) {
         if (node.typeParameters) {
-            throw new Error("Type with generics are not supported!");
+            return {node, sourceFile, varName, zodImportValue, getDependencyName, skipParseJSDoc};
         }
         const jsDocTags = skipParseJSDoc ? {} : (0, jsDocTags_1.getJSDocTags)(node, sourceFile);
         schema = buildZodPrimitive({
