import * as ts2zod from 'ts-to-zod';

export function generateSchema(sourceText: string): string {
    let content = '';
    const result = ts2zod.generate({ sourceText, keepComments: true });
    if (result.errors && result.errors.length > 0) {
        content = result.errors.map(x => {
            x = x.replace(/\n/g, '\n//');

            return `//${x}`;
        }).join('\n') + '\n\n';
    }

    const schemasFile = result.getZodSchemasFile('')
        .replace(/\/\/ Generated by ts-to-zod/g, '')
        .trim();
    content += schemasFile;

    if (schemasFile.length > 0) {
        const inferredTypes = result.getInferredTypes('')
            .replace(`// Generated by ts-to-zod`, '')
            .replace(`import { z } from "zod";`, '')
            .replace(`import * as generated from "";`, '')
            .replace(/infer<typeof generated./g, 'infer<typeof ')
            .trim();
        if (inferredTypes.length > 0) {
            content += `\n\n// inferred types:\n${inferredTypes}`;
        }
    }

    if (content?.length > 0) {
        content = `// Generated by ts-to-zod (https://github.com/psulek/ts-to-zod)\n${content}`;
    }

    return content;
}